{
  
    
        "post0": {
            "title": "Racial Bias Behind Foundations",
            "content": "INTRODUCTION . In this project, I explore implications of racial disparities behind foundation shades through different aspects such as their shade range, numerical labeling system, and categorical labels. . Questions . Are there any racial disparities in the range and variety of foundation shades? | Is there a trend in the numerical labeling system that reflects racial bias? | How diverse is the language in labeling different shades? | METHODS . Data . This data was provided by the digital publication company &#39;The Pudding&#39;. The Github repository includes a number of datasets, but the ones used for this project were &#39;allCategories&#39;, &#39;allNumbers&#39;, and &#39;allShades&#39;. The data were collected from US Sephora and Ulta&#39;s websites on January 11 and January 18, 2021, respectively. Any products available on both Sephora and Ulta’s websites were consolidated, and Ulta’s version of the product was used. &#39;allCategories&#39; csv file includes a dataset of foundation shades that used a word-based labelling system and their categories. The labels of shades were manually assigned to 16 categories. &#39;allNumbers&#39; csv file includes a dataset of foundation products from Sephora and Ulta’s US websites that use a number-based labelling system. Utilizing all of the number labels from a single product line, they determined whether the numbers were sequential (i.e., there were no repeated numbers) or the same number could be used for multiple shades in the same line. For sequential products, the data shows whether the products were organized from light to dark or dark to light. &#39;allShades&#39; csv file includes a dataset of color information from each foundation swatch. Hex values and lightness were extracted from the featured swatches on the website using the jpeg, magick, and imager packages in R. . Terms to Know . Lightness: The lightness value from the HSL color space. This is represented as a decimal from 0 to 1 where 0 is pure black and 1 is pure white. | Categories: Manually assigned categories for labels of foundation shades. ex) Teint Idôle Ultra 24H Long Wear Matte Foundation with SPF 15 495 Suede Suede - &#39;Textile&#39; Category | Numbers: The numbers associated with a particular shade. ex) Pro Filt’r Soft Matte Longwear Liquid Foundation Color: 498 - for very rich, deep skin with neutral undertones | . Shades . Below are images of shades that vary in lightness from 0.2 to 0.9 for reference. I extracted the Hex values of foundation shades that vary in lightness from 0.2 to 0.9 from the allShades dataset, and I used the website &quot;https://www.colorhexa.com/&quot; in order to retrieve the image of that Hex value. . from IPython import display . Lightness: 0.2 . Lightness: 0.3 . Lightness: 0.4 . Lightness: 0.5 . Lightness: 0.6 . Lightness: 0.7 . Lightness: 0.8 . Lightness: 0.9 . RESULTS . Exploring Data . import pandas as pd import requests import io import matplotlib.pyplot as plt . url = &quot;https://raw.githubusercontent.com/the-pudding/data/master/foundation-names/allCategories.csv&quot; download = requests.get(url).content . categoriesdf = pd.read_csv(io.StringIO(download.decode(&#39;utf-8&#39;))) . url2 = &quot;https://raw.githubusercontent.com/the-pudding/data/master/foundation-names/allShades.csv&quot; download = requests.get(url2).content . shadesdf = pd.read_csv(io.StringIO(download.decode(&#39;utf-8&#39;))) . url3 = &quot;https://raw.githubusercontent.com/the-pudding/data/master/foundation-names/allNumbers.csv&quot; download = requests.get(url3).content . numbersdf = pd.read_csv(io.StringIO(download.decode(&#39;utf-8&#39;))) . shadesdf . brand product url description imgSrc imgAlt name specific colorspace hex hue sat lightness . 0 Anastasia Beverly Hills | Luminous Foundation | https://www.ulta.com/luminous-foundation?produ... | 355N (medium skin with a neutral golden undert... | https://images.ulta.com/is/image/Ulta/2551437s... | 355N (medium skin with a neutral golden undert... | NaN | 355N | RGB | #A06F4A | 25.813953 | 0.367521 | 0.458824 | . 1 Anastasia Beverly Hills | Luminous Foundation | https://www.ulta.com/luminous-foundation?produ... | 100N (very fair skin with a neutral undertone) | https://images.ulta.com/is/image/Ulta/2551414s... | 100N (very fair skin with a neutral undertone) | NaN | 100N | RGB | #F1E7DB | 32.727273 | 0.440000 | 0.901961 | . 2 Anastasia Beverly Hills | Luminous Foundation | https://www.ulta.com/luminous-foundation?produ... | 110C (very fair skin with a cool undertone) | https://images.ulta.com/is/image/Ulta/2551412s... | 110C (very fair skin with a cool undertone) | NaN | 110C | RGB | #F0E7DB | 34.285714 | 0.411765 | 0.900000 | . 3 Anastasia Beverly Hills | Luminous Foundation | https://www.ulta.com/luminous-foundation?produ... | 120W (very fair skin with a warm undertone) | https://images.ulta.com/is/image/Ulta/2551419s... | 120W (very fair skin with a warm undertone) | NaN | 120W | RGB | #EFD0AE | 31.384615 | 0.670103 | 0.809804 | . 4 Anastasia Beverly Hills | Luminous Foundation | https://www.ulta.com/luminous-foundation?produ... | 130N (very fair skin with a neutral pink under... | https://images.ulta.com/is/image/Ulta/2551416s... | 130N (very fair skin with a neutral pink under... | NaN | 130N | RGB | #D5C1AA | 32.093023 | 0.338583 | 0.750980 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 6811 Lancôme | Bienfait Teinté Beauty Balm Sunscreen Broad Sp... | https://www.sephora.com/product/bienfait-teint... | 5 Sand for medium skintones with neutral to pe... | /productimages/sku/s1509348+sw.jpg | 5 Sand 1.7 oz | Sand | 5 | RGB | #D29F77 | 26.373626 | 0.502762 | 0.645098 | . 6812 Antonym | Certified Organic Baked Foundation | https://www.sephora.com/product/certified-orga... | Dark - Selected | /productimages/sku/s1977479+sw.jpg | Dark 0.29 oz/ 8.5 g Clean at Sephora | Dark | NaN | RGB | #D39C7B | 22.500000 | 0.500000 | 0.654902 | . 6813 Benefit Cosmetics | Hello Happy Soft Blur Foundation | https://www.sephora.com/product/hello-happy-so... | Shade 11 dark neutral - Selected | /productimages/sku/s2086551+sw.jpg | Shade 11 1 oz/ 30 mL | NaN | Shade 11 | RGB | #C9866E | 15.824176 | 0.457286 | 0.609804 | . 6814 Urban Decay Cosmetics | Naked Skin Ultra Definition Pressed Finishing ... | https://www.sephora.com/product/naked-skin-ult... | Naked Dark - Selected | /productimages/sku/s1532084+sw.jpg | Naked Dark 0.26 oz/ 7.3 g | Naked Dark | NaN | RGB | #AF7754 | 23.076923 | 0.362550 | 0.507843 | . 6815 bareMinerals | bareSkin® Pure Brightening Serum Foundation Br... | https://www.sephora.com/product/bareskin-pure-... | Bare Mocha 20 - Selected | /productimages/sku/s1576883+sw.jpg | Bare Mocha 20 1 oz | Bare Mocha | 20 | RGB | #AF7357 | 19.090909 | 0.354839 | 0.513725 | . 6816 rows × 13 columns . categoriesdf . brand product url imgSrc name categories specific hex lightness . 0 BECCA Cosmetics | Ultimate Coverage 24 Hour Foundation | https://www.ulta.com/ultimate-coverage-24-hour... | https://images.ulta.com/is/image/Ulta/2528173s... | shell | gem | 1W1 | #EFCBA4 | 0.790196 | . 1 BECCA Cosmetics | Ultimate Coverage 24 Hour Foundation | https://www.ulta.com/ultimate-coverage-24-hour... | https://images.ulta.com/is/image/Ulta/2529033s... | linen | textile | 1N1 | #F3CEB0 | 0.821569 | . 2 BECCA Cosmetics | Ultimate Coverage 24 Hour Foundation | https://www.ulta.com/ultimate-coverage-24-hour... | https://images.ulta.com/is/image/Ulta/2549910s... | alabaster | gem | 1C1 | #F2CBB4 | 0.827451 | . 3 BECCA Cosmetics | Ultimate Coverage 24 Hour Foundation | https://www.ulta.com/ultimate-coverage-24-hour... | https://images.ulta.com/is/image/Ulta/2528170s... | porcelain | misc | 1N2 | #F6C8A7 | 0.809804 | . 4 BECCA Cosmetics | Ultimate Coverage 24 Hour Foundation | https://www.ulta.com/ultimate-coverage-24-hour... | https://images.ulta.com/is/image/Ulta/2529037s... | ivory | gem, color | 1C2 | #F0C4AB | 0.805882 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | . 5302 Lancôme | Bienfait Teinté Beauty Balm Sunscreen Broad Sp... | https://www.sephora.com/product/bienfait-teint... | /productimages/sku/s1509348+sw.jpg | sand | rock | 5 | #D29F77 | 0.645098 | . 5303 Antonym | Certified Organic Baked Foundation | https://www.sephora.com/product/certified-orga... | /productimages/sku/s1977479+sw.jpg | dark | descriptor | NaN | #D39C7B | 0.654902 | . 5304 Benefit Cosmetics | Hello Happy Soft Blur Foundation | https://www.sephora.com/product/hello-happy-so... | /productimages/sku/s2086551+sw.jpg | dark neutral | descriptor | Shade 11 | #C9866E | 0.609804 | . 5305 Urban Decay Cosmetics | Naked Skin Ultra Definition Pressed Finishing ... | https://www.sephora.com/product/naked-skin-ult... | /productimages/sku/s1532084+sw.jpg | naked dark | skin, descriptor | NaN | #AF7754 | 0.507843 | . 5306 bareMinerals | bareSkin® Pure Brightening Serum Foundation Br... | https://www.sephora.com/product/bareskin-pure-... | /productimages/sku/s1576883+sw.jpg | bare mocha | skin, drink | 20 | #AF7357 | 0.513725 | . 5307 rows × 9 columns . numbersdf . brand product name specific lightness hex lightToDark numbers id . 0 Makeup Revolution | Conceal &amp; Define Full Coverage Foundation | NaN | F0 | 0.949020 | #F2F2F2 | True | 0.0 | 1.0 | . 1 HOURGLASS | Veil Fluid Makeup | Porcelain | No. 0 | 0.817647 | #F6D3AB | True | 0.0 | 2.0 | . 2 TOM FORD | Traceless Soft Matte Foundation | Pearl | 0.0 | 0.850980 | #F0D8C2 | True | 0.0 | 3.0 | . 3 Armani Beauty | Neo Nude Foundation | NaN | 0 | 0.911765 | #F0E8E1 | True | 0.0 | 4.0 | . 4 TOM FORD | Traceless Foundation Stick | Pearl | 0.0 | 0.911765 | #FDE5D4 | True | 0.0 | 5.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | . 3112 Juvia&#39;s Place | I Am Magic Foundation | Isla | 730 | 0.792157 | #ECC4A8 | False | 730.0 | 93.0 | . 3113 Origins | Pretty in Bloom™ SPF 20 Flower-Infused Long-We... | NaN | 730 | 0.429412 | #835E58 | True | 730.0 | 102.0 | . 3114 Juvia&#39;s Place | I Am Magic Foundation | Marisol | 740 | 0.803922 | #F2C5A8 | False | 740.0 | 93.0 | . 3115 Origins | Pretty in Bloom™ SPF 20 Flower-Infused Long-We... | NaN | 740 | 0.407843 | #715F5F | True | 740.0 | 102.0 | . 3116 Almay | Clear Complexion Make Myself Clear Makeup | Cappuccino | 900 | 0.360784 | #904D28 | True | 900.0 | 92.0 | . 3117 rows × 9 columns . shadesdf.describe() . hue sat lightness . count 6816.000000 | 6816.000000 | 6816.000000 | . mean 24.863998 | 0.517515 | 0.633914 | . std 6.046594 | 0.161520 | 0.162984 | . min 0.000000 | 0.000000 | 0.154902 | . 25% 21.818182 | 0.405405 | 0.517647 | . 50% 25.333333 | 0.500000 | 0.662745 | . 75% 28.387097 | 0.613361 | 0.758824 | . max 230.400000 | 1.000000 | 0.996078 | . Using this summary statistics from the shades dataset, I chose to use the lightness value of 0.634, which is the mean of the lightness values, as a point of distinction between lighter skin tones versus darker skin tones for the purpose of this project. . Range and variety of foundation shades . Histogram of lightness . shadesdf[&#39;lightness&#39;].plot(kind=&#39;hist&#39;) plt.axvline(x=0.634, color = &#39;r&#39;) plt.title(&#39;Distribution of Lightness Values&#39;) plt.ylabel(&#39;Frequency&#39;) plt.xlabel(&#39;Lightness&#39;) . Text(0.5, 0, &#39;Lightness&#39;) . The histogram of lightness shows that the the two tallest peaks occur around lightness value of 0.7 and 0.8 respectively, which are both considered to be lighter shades as they are bigger than 0.634. . Shade Range by Brands . In order to explore the range of shades different brands offer, I chose to analyze the top and bottom 5 brands in terms of the number of their occurrences in the shadesdf dataset. . shadesdf[[&#39;brand&#39;,&#39;lightness&#39;]] . brand lightness . 0 Anastasia Beverly Hills | 0.458824 | . 1 Anastasia Beverly Hills | 0.901961 | . 2 Anastasia Beverly Hills | 0.900000 | . 3 Anastasia Beverly Hills | 0.809804 | . 4 Anastasia Beverly Hills | 0.750980 | . ... ... | ... | . 6811 Lancôme | 0.645098 | . 6812 Antonym | 0.654902 | . 6813 Benefit Cosmetics | 0.609804 | . 6814 Urban Decay Cosmetics | 0.507843 | . 6815 bareMinerals | 0.513725 | . 6816 rows × 2 columns . shadesdf.groupby(&#39;brand&#39;)[&#39;brand&#39;].count() #counting the number of occurrences of each brand in shadesdf . brand AMOREPACIFIC 5 Almay 20 Anastasia Beverly Hills 54 Antonym 7 Armani Beauty 129 ... florence by mills 15 jane iredale 57 lilah b. 5 rms beauty 32 surratt beauty 14 Name: brand, Length: 107, dtype: int64 . brand = list(shadesdf.groupby(&#39;brand&#39;)[&#39;brand&#39;].count().sort_values(ascending=False)[-5:].index) + list(shadesdf.groupby(&#39;brand&#39;)[&#39;brand&#39;].count().sort_values(ascending=False)[:5].index) #retrieving 5 brands that occurred most frequently and 5 brands that occurred least frequently brand . [&#39;COOLA&#39;, &#39;Marc Jacobs Beauty&#39;, &#39;Dr. Dennis Gross Skincare&#39;, &#39;KIKO Milano&#39;, &#39;Black Up&#39;, &#39;bareMinerals&#39;, &#39;Tarte&#39;, &#39;Clinique&#39;, &#39;SEPHORA COLLECTION&#39;, &#39;MAC&#39;] . one=shadesdf[shadesdf.brand == &#39;COOLA&#39;] two=one.append(shadesdf[shadesdf.brand == &#39;Marc Jacobs Beauty&#39;]) three=two.append(shadesdf[shadesdf.brand == &#39;Dr. Dennis Gross Skincare&#39;]) four=three.append(shadesdf[shadesdf.brand == &#39;KIKO Milano&#39;]) five=four.append(shadesdf[shadesdf.brand == &#39;Black Up&#39;]) six=five.append(shadesdf[shadesdf.brand == &#39;bareMinerals&#39;]) seven=six.append(shadesdf[shadesdf.brand == &#39;Tarte&#39;]) eight=seven.append(shadesdf[shadesdf.brand == &#39;Clinique&#39;]) nine=eight.append(shadesdf[shadesdf.brand == &#39;SEPHORA COLLECTION&#39;]) ten=nine.append(shadesdf[shadesdf.brand == &#39;MAC&#39;]) #dataframe that only includes the 10 brands from &#39;brand&#39; . ten[[&#39;brand&#39;,&#39;lightness&#39;]].boxplot(by=&#39;brand&#39;, figsize=(20,10)) plt.title(&#39;Range of Shades by Brands&#39;) plt.ylabel(&#39;Lightness&#39;) plt.xlabel(&#39;Brand&#39;) . Text(0.5, 0, &#39;Brand&#39;) . The boxplots above show that &#39;Clinique&#39; has the widest range of shades while &#39;Black Up&#39; has the narrowest range of shades. Brands such as &#39;Clinique&#39;, &#39;Sephora Collection&#39;, &#39;Tarte&#39;, &#39;bareMinerals&#39; offer a wide variety of shades, while brands such as &#39;Dr. Dennis Gross Skincare&#39;, &#39;Marc Jacobs Beauty&#39; only offer limited range of shades. . Trends in Numerical Labeling System . The author of the article &quot;Naked Truth&quot; states that, &quot;When beauty brands label their foundation shades with sequential numbers, they are implicitly prioritizing those at the beginning of the sequence.&quot; Additionally, the numbering system affects the accessibility of certain shades as online websites tend to hide shades that are labeled with higher numbers behind the &quot;see more&quot; button. I wanted to explore if there is a noticeable pattern in the numerical labeling system in foundation shades. . In order to see how many of the products are organized from light to dark shades, I had to find how many different products there were in the numbersdf dataset since counting the number of rows in the dataset would give me the total count of shades. . products = numbersdf[[&#39;product&#39;,&#39;lightToDark&#39;]] products[&#39;product&#39;].unique().size #number of different products (instead of shades) . 145 . noduplicates = products.drop_duplicates() #removing duplicate products noduplicates[&#39;lightToDark&#39;].sum() #counting how many products are organized from light to dark . 126 . Out of 145 products, 126 products are organized in a sequential way from light to dark. . 86.89655172413792 . 86.9% of the products in the dataset organize their shades from light to dark. . Scatterplot of correlation between lightness and shade numbers . numbersdf.plot(kind=&#39;scatter&#39;, x=&#39;lightness&#39;, y=&#39;numbers&#39;) plt.title(&#39;Relationship between Lightness and Shade Number&#39;) plt.ylabel(&#39;Shade Number&#39;) plt.xlabel(&#39;Lightness&#39;) . Text(0.5, 0, &#39;Lightness&#39;) . numbersdf[[&#39;lightness&#39;,&#39;numbers&#39;]].corr() . lightness numbers . lightness 1.000000 | -0.259673 | . numbers -0.259673 | 1.000000 | . There is a weak negative correlation of -.26 between &#39;lightness&#39; and &#39;numbers.&#39; . Label Variation of Foundation Shades . categories = categoriesdf.groupby(&#39;categories&#39;).size() categories.sort_values(ascending=False) #what categories are most commonly used to label shades . categories descriptor 1322 food 682 descriptor, color 250 location 210 drink 206 ... misc, skin, color, compliment 1 plant, color, food 1 plant, color, gem 1 sand 1 wood, descriptor 1 Length: 128, dtype: int64 . Descriptor, food, color, location, drink are one of the most common categories used to label foundation shades. . Breaking down the categories . In order to explore the variability in the word choice of labeling different foundation shades, I plotted a histogram showing the distribution of shades for each category. . Text(0.5, 0, &#39;Lightness&#39;) . Animals were most frequently used to label shades between 0.6 and 0.7. . Text(0.5, 0, &#39;Lightness&#39;) . Color terms were most frequently used to label shades between 0.6 and 0.7. . Text(0.5, 0, &#39;Lightness&#39;) . Compliments were most frequently used to label shades between 0.65 and 0.75. . c = compliment[compliment.lightness &lt; 0.634] compliment1 = c.name.unique() d = compliment[compliment.lightness &gt; 0.634] compliment2 = d.name.unique() . c.count(), d.count() . (brand 40 product 40 url 40 imgSrc 40 name 40 categories 40 specific 23 hex 40 lightness 40 dtype: int64, brand 57 product 57 url 57 imgSrc 57 name 57 categories 57 specific 34 hex 57 lightness 57 dtype: int64) . 40 shades that fall under the the darker shade category were labeled with compliments, while 57 shades that fall under the lighter shade category were labeled with compliments. . Text(0.5, 0, &#39;Lightness&#39;) . Descriptors were most frequently used to label shades of lightness value of about 0.7. . Text(0.5, 0, &#39;Lightness&#39;) . This histogram has a noticeably different shape compared to the previous ones. It shows that drinks were commonly used to name shades with lightness values that are equal to or lower than 0.5 . a = drink[drink.lightness &lt; 0.634] drinktype1 = a.name.unique() b = drink[drink.lightness &gt; 0.634] drinktype2 = b.name.unique() drinktype1, drinktype2 . (array([&#39;café&#39;, &#39;mocha&#39;, &#39;espresso&#39;, &#39;chai&#39;, &#39;spice rum&#39;, &#39;cappuccino&#39;, &#39;suede mocha&#39;, &#39;java&#39;, &#39;coffee&#39;, &#39;light espresso&#39;, &#39;dark espresso&#39;, &#39;latte&#39;, &#39;cognac&#39;, &#39;rich mocha&#39;, &#39;rich java&#39;, &#39;expresso&#39;, &#39;cream beige&#39;, &#39;creme cafe&#39;, &#39;spiced latte&#39;, &#39;hot chocolate&#39;, &#39;café brown&#39;, &#39;classic tan/cappuccino&#39;, &#39;spiced rum&#39;, &#39;crème café&#39;, &#39;creamy tan&#39;, &#39;creamy cocoa&#39;, &#39;cafe au lait&#39;, &#39;toasted chai&#39;, &#39;warm mocha&#39;, &#39;nude mocha&#39;, &#39;deep espresso&#39;, &#39;hint of cappuccino&#39;, &#39;hint of mocha&#39;, &#39;hint of espresso&#39;, &#39;espresso beige&#39;, &#39;latte macchiato beige&#39;, &#39;deep mocha&#39;, &#39;neutral champagne&#39;, &#39;cool chai&#39;, &#39;rich espresso&#39;, &#39;intense java&#39;, &#39;coffee bean&#39;, &#39;tea&#39;, &#39;macchiato&#39;, &#39;tan café latte&#39;, &#39;light cream&#39;, &#39;neutral mocha&#39;, &#39;mocha spice&#39;, &#39;mocha java&#39;, &#39;cool espresso&#39;, &#39;warm coffee&#39;, &#39;brandy&#39;, &#39;light mocha&#39;, &#39;silk brandy&#39;, &#39;bare mocha&#39;], dtype=object), array([&#39;crème&#39;, &#39;latte&#39;, &#39;chai&#39;, &#39;cappucino&#39;, &#39;mocha&#39;, &#39;cream&#39;, &#39;creamy nude&#39;, &#39;creamy vanilla&#39;, &#39;creamy natural&#39;, &#39;matte cream&#39;, &#39;cream ivory&#39;, &#39;tea&#39;, &#39;buttermilk&#39;, &#39;creamy beige&#39;, &#39;soft chai&#39;, &#39;hint of crème&#39;, &#39;hint of latte&#39;, &#39;cream beige&#39;, &#39;cognac&#39;, &#39;coffee&#39;, &#39;pink cream&#39;, &#39;light cream&#39;, &#39;peach cream&#39;, &#39;milkshake&#39;, &#39;macchiato&#39;, &#39;milk&#39;, &#39;champagne&#39;, &#39;cool milk&#39;, &#39;milky peach&#39;, &#39;café&#39;], dtype=object)) . This shows that a lot of darker shades are labeled with the terms &#39;mocha&#39; and &#39;espresso&#39;, while lighter shades are frequently labeled as &#39;cream&#39; or &#39;milk&#39;. . a.count(), b.count() . (brand 205 product 205 url 205 imgSrc 205 name 205 categories 205 specific 120 hex 205 lightness 205 dtype: int64, brand 73 product 73 url 73 imgSrc 73 name 73 categories 73 specific 34 hex 73 lightness 73 dtype: int64) . These counts indicate that darker shades are labeled with drinks about three times frequently than the lighter shades. . Text(0.5, 0, &#39;Lightness&#39;) . Foods are most frequently used to label shades with lightness values between 0.6 and 0.7. . Text(0.5, 0, &#39;Lightness&#39;) . This histogram also has a relatively distinct shape which is left-skewed. This indicates that many shades that are labeled using gems are clustered at the higher end of the lightness scale. The graph shows that gems are most frequently used to label shades with lightness value of about 0.8. . e = gem[gem.lightness &lt; 0.634] gem1 = e.name.unique() f = gem[gem.lightness &gt; 0.634] gem2 = f.name.unique() . e.count(), f.count() . (brand 84 product 84 url 84 imgSrc 84 name 84 categories 84 specific 52 hex 84 lightness 84 dtype: int64, brand 368 product 368 url 368 imgSrc 368 name 368 categories 368 specific 223 hex 368 lightness 368 dtype: int64) . The number of lighter shades that are named using gems are almost four times more than the number of darkers shades that named using gems. . Text(0.5, 0, &#39;Lightness&#39;) . Locations are most frequently used to label shades with lightness value of around 0.7. . Text(0.5, 0, &#39;Lightness&#39;) . Metals were most frequently used to label shades with lightness value of around 0.6. . j = metal[metal.lightness &lt; 0.634] metal1 = j.name.unique() k = metal[metal.lightness &gt; 0.634] metal2 = k.name.unique() metal1, metal2 . (array([&#39;bronze&#39;, &#39;deep bronze&#39;, &#39;beautiful bronze&#39;, &#39;copper&#39;, &#39;bronze beige&#39;, &#39;golden bronze&#39;, &#39;honey bronze&#39;, &#39;bronze venus&#39;, &#39;warm bronze&#39;, &#39;dore&#39;, &#39;tan café latte&#39;, &#39;tan bronze&#39;, &#39;cool copper&#39;], dtype=object), array([&#39;honey bronze&#39;, &#39;bronze&#39;, &#39;bronzed beige&#39;, &#39;bronze beige&#39;, &#39;dore medium&#39;, &#39;dore&#39;, &#39;bronzed&#39;, &#39;gold&#39;], dtype=object)) . j.count(), k.count() . (brand 51 product 51 url 51 imgSrc 51 name 51 categories 51 specific 40 hex 51 lightness 51 dtype: int64, brand 12 product 12 url 12 imgSrc 12 name 12 categories 12 specific 7 hex 12 lightness 12 dtype: int64) . 51 shades that fall under the darker shade category were labeled with metal terms, while 12 shades that fall under the lighter shade category were labeled with metal terms. . Text(0.5, 0, &#39;Lightness&#39;) . Misc terms were most frequently used to label shades with lightness value of about 0.8, and the shape of the histogram is left-skewed. This shows that most shades that are named using misc terms fall under the category of lighter shade. The dataset defines the &#39;misc&#39; category as &#39;labels that didn’t seem to fit the other categories&#39;. This seems to indicate that there is a lot more variability and creativity when it comes to naming lighter shades compared to darker shades. . Text(0.5, 0, &#39;Lightness&#39;) . Names were most frequently used to name shades with lightness values between 0.7 and 0.8 . Text(0.5, 0, &#39;Lightness&#39;) . Plants were most frequently used to name shades with lightness value of about 0.8. . Text(0.5, 0, &#39;Lightness&#39;) . Rocks were most frequently used to name shades with lightness values that fall between 0.6 and 0.7. . Text(0.5, 0, &#39;Lightness&#39;) . Skin terms were most frequently used to name shades with lightness value of about 0.7. . Text(0.5, 0, &#39;Lightness&#39;) . Textiles were most frequently used to name shades with lightness value of about 0.8. . Text(0.5, 0, &#39;Lightness&#39;) . Woods were most frequently used to name shades with lightness values between 0.4 and 0.5. . m = wood[wood.lightness &lt; 0.634] wood1 = m.name.unique() n = wood[wood.lightness &gt; 0.634] wood2 = m.name.unique() . m.count(), n.count() . (brand 136 product 136 url 136 imgSrc 136 name 136 categories 136 specific 73 hex 136 lightness 136 dtype: int64, brand 43 product 43 url 43 imgSrc 43 name 43 categories 43 specific 36 hex 43 lightness 43 dtype: int64) . 136 shades that fall under the darker shade category were labeled with wood terms, while 43 shades that fall under the lighter shade category were labeled with wood terms. . darkershades = categoriesdf[categoriesdf.lightness &lt; 0.634] lightershades = categoriesdf[categoriesdf.lightness &gt; 0.634] . a = darkershades.groupby(&#39;categories&#39;).size() a.sort_values(ascending=False)[:15].plot(kind=&#39;barh&#39;) plt.title(&#39;Top 15 Frequently Used Categories to Label Darker Shades&#39;) plt.ylabel(&#39;Category&#39;) plt.xlabel(&#39;Frequency&#39;) . Text(0.5, 0, &#39;Frequency&#39;) . b = lightershades.groupby(&#39;categories&#39;).size() b.sort_values(ascending=False)[:15].plot(kind=&#39;barh&#39;) plt.title(&#39;Top 15 Frequently Used Categories to Label Lighter Shades&#39;) plt.ylabel(&#39;Category&#39;) plt.xlabel(&#39;Frequency&#39;) . Text(0.5, 0, &#39;Frequency&#39;) . DISCUSSION . Analytical Process . While analyzing the datasets, I went through a few direction changes. Initially, I chose the point of distinction between lighter and darker shades as 0.5 simply because it was the middle number in the lightness range that spans from 0 to 1. However, I realized that there were no foundation shades that were 0 and 1 as they are black and white, respectively. Thus, I chose to use the mean of the lightness values of the shades that are included in the dataset as the point of distinction. I also thought about using a median, but median is not good at capturing outliers relative to mean, and the two measures were not much different from each other. . I also made a visualization which showed the mean shade of each brand with the hopes that the average will give insights into how inclusive the brands are in terms of shade range. However, I came to the conclusion that it would be better to explicitly calculate the range of shades by subtracting the lowest shade from the highest shade from that specific brand instead of using average values. . Additionally, the correlation between &#39;lightness&#39; and &#39;number&#39; of -.26 initially made me think that the relationship is not strong enough to conclude there is a definite trend in which lighter shades are always labeled first. However, I realized that not all products start their numerical labels with 0. For example, there are products that start their numerical labeling system with 100. This made me think that calculating the correlation wouldn&#39;t be the best way to identify the relationship between lightness and numbers. . Range and Variety of Shades . The histogram of lightness with the two tallest peaks that fall under the category of lighter shades indicates that shades with lightness values between 0.7 and 0.8 are most available and accessible. In terms of brands and their shade ranges, Clinique offered the widest range of shades with lightness values that range from 0.3 to higher than 0.9. Tarte, bareMinerals, and MAC also wide variety of shades. For brands that had the least number of shades such as Black Up, COOLA, KIKO Milano and Marc Jacobs Beauty, it was interesting to see that brands such as Marc Jacobs Beauty and Black Up offered a restricted range of shades that all fell under the category of darker shades. This went against my preconceived notion that if a brand only had a restricted range of shades, it would only offer shades catered towards lighter shades. Even though brands such as Dr. Dennis Gross Skincare only offered lighter shades, there were brands that only offered darker shades as well. Overall, these results seemed to indicate that the beauty industry has generally improved upon being inclusive in terms of shade range by diversifying their shades as well as through brands that specifically target PoC. . Numerical Labeling System . 126 out of 145 products in the dataset organized their shades from light to dark, which shows that brands generally organize the shades in a sequential order which puts the lighter shades in the begnning. As mentioned above in the results section, the inherent meaning and connotation of being the first as well as the consequences of shades labeled with higher numbers being hidden behind the &#39;see more&#39; button on websites seem to suggest that this labeling system implicitly creates racial disparities. Thus, make up brands should break the cycle of organizing the shades from light to dark and normalize the pattern of labeling shades dark to light. . Variability of Word Choice . Overall, the histograms showed that lighter shades were labeled with a variety of different categories. Out of the 16 categories, 10 categories were most frequently used to label shades with lightness values that fell under the category of a lighter shade. Meanwhile, the language for labeling darker shades was relatively restricted. Darker shades were most frequently labeled using drinks, metal and wood. This shows that the language in labeling darker shades is not as diverse as the language used to describe lighter shades. . Additionally, categories that inherently have positive connotations such as ‘compliment’ or ‘gem’ were more frequently used for lighter shades than darker shades. Especially, gems were used to label 368 lighter shades, while they were used to label 84 darker shades. These results imply an implicit bias in attitudes towards lighter versus darker shades. . . In all, the data showed that even though the most available and accessible foundation shades are lighter shades, there are a lot of available options for darker shades as well. In terms of the variability of word choice in labeling shades, however, data suggests that the language is quite limited when it comes to labeling darker shades relative to lighter shades. The results indicate that there is a lack of creativity and variability for darker shade labels. Additionally, lighter shades are labeled with words that have positive connotation noticeably more than the darker shades. The pattern in the numerical labeling system shows how frequently brands organize their shades from light to dark instead of dark to light. These results suggest that the current selection of foundations in the US market seems to have improved in terms of shade range but definitely has room for improvement regarding the language used to label the shades as well as the numerical labeling system. . References . Amaka, O. (2021, March). The Naked Truth. The Pudding. Retrieved March 14, 2022, from https://pudding.cool/2021/03/foundation-names/ Moné, B. (2018, July 30). 4 times beauty brands were dragged for having a &#39;limited&#39; range of Foundation. Insider. Retrieved March 14, 2022, from https://www.insider.com/beauty-brands-called-out-for-not-enough-foundation-shades-2018-7 .",
            "url": "https://samanthapark23.github.io/finalprojectblog/fastpages/jupyter/2022/03/14/Blog.html",
            "relUrl": "/fastpages/jupyter/2022/03/14/Blog.html",
            "date": " • Mar 14, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://samanthapark23.github.io/finalprojectblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://samanthapark23.github.io/finalprojectblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://samanthapark23.github.io/finalprojectblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://samanthapark23.github.io/finalprojectblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}